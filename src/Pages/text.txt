import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getAllProducts } from "../Redux/appReducer/action";
import "../Styles/Products.css";
import { ProductPageCarousel } from "../Components/ProductPageComponents/ProductPageCarousel";
import {
  Button,
  Box,
  Image,
  Skeleton,
  SkeletonText,
  Grid,
} from "@chakra-ui/react";
import { SingleProductCard } from "../Components/ProductPageComponents/SingleProductCard";
import Footer from "./FooterPage";
import loading_blue from "../Assets/loading_blue.gif";
import { useLocation } from "react-router-dom";

// onClick={() => categoryhandle("vegetable")}

const Product = () => {

  const search = useLocation().search;
  const query = new URLSearchParams(search).get("category");
  let [page, setPage] = useState(1);
  const [price, setPrice] = useState([]);
  const [sort, setSort] = useState("numReviews");
  const [orderBy, setOrderBy] = useState("");

  const dispatch = useDispatch();
  const products = useSelector((store) => store.appReducer.allProducts);

  let length;
  if (query === "") {
    length = 216;
  } else if (query === "makeup") {
    length = 40;
  } else if (query === "skincare") {
    length = 58;
  } else if (query === "hair") {
    length = 38;
  } else if (query === "fragrance") {
    length = 37;
  } else if (query === "tools") {
    length = 30;
  } else if (query === "bath") {
    length = 39;
  }

  const [prevQuery, setPrevQuery] = useState(query);
  const loading = useSelector((store) => store.appReducer.isLoadingAllProduct);

  useEffect(() => {
    if (prevQuery !== query) {
      setPage(1);
    }
    dispatch(
      getAllProducts({ category: query, page: page, price, sort, orderBy })
    );
    setPrevQuery(query);
  }, [dispatch, query, page, prevQuery, price, sort, orderBy]);

  // useEffect(() => {
  //   if (products.length === 0) {
  //     dispatch(getAllProducts());
  //   }
  // }, [products.length, dispatch]);

  if (loading) {
    return (
      <Grid
        w={{
          base: "100%",
          md: "90%",
          lg: "80%",
        }}
        m="auto"
        templateColumns={{
          base: "repeat(2,1fr)",
          md: "repeat(3,1fr)",
          lg: "repeat(4,1fr)",
        }}
        gap="10"
        p="10"
      >
        {new Array(20).fill(0).map((e, i) => (
          <Box w=" 100%" m="auto" boxShadow="lg" bg="white" key={i}>
            <Skeleton size="10" h="180px" />
            <SkeletonText
              w="80%"
              m="auto"
              mb="20px"
              mt="4"
              noOfLines={4}
              spacing="4"
            />
          </Box>
        ))}
      </Grid>
    );
  }
else{
  return (
    <>
      <div className="ProductContainer">
        <section>
          <ProductPageCarousel />
        </section>
        <section>
          <div className="sidebarAtProductPage">
           
          </div>
          {products.length === 0 ? (
            <Box
              display="flex"
              justifyContent="center"
              textAlign="center"
              width="100%"
              height="50vh"
            >
              <Box
                width={{
                  base: "50%",
                  sm: "40%",
                  md: "40%",
                  lg: "20%",
                  xl: "20%",
                }}
                display="block"
                textAlign="center"
              >
                <Image width="100%" src={loading_blue} alt="emptycart" />
                <Box
                  fontWeight="bold"
                  fontSize={{
                    base: "100%",
                    sm: "100%",
                    md: "200%",
                    lg: "200%",
                    xl: "200%",
                  }}
                  color="darkblue"
                  width="100%"
                  display="flex"
                  justifyContent="center"
                  textAlign="center"
                  margin="auto"
                  fontFamily={"Dancing Script, cursive"}
                >
                  Empty Cart...
                </Box>
              </Box>
            </Box>
          ) : (
            <div className="mainBoxAtProductPage">
              {products.map((ele) => {
                return (
                  <SingleProductCard
                    key={ele._id}
                    id={ele._id}
                    brand={ele.brand}
                    name={ele.name}
                    mrp={ele.mrp}
                    price={ele.price}
                    quantity={ele.quantity}
                    weight={ele.weight}
                    category={ele.category}
                    ImgSrc={ele.ImgSrc}
                    sasta={ele.sasta}
                    packet={ele.packet}
                    isavailable={ele.isavailable}
                    offers={ele.offers}
                  />
                );
              })}
            </div>
          )}
        </section>
        <div className="pagination">
          <Button disabled={page === 1} onClick={() => setPage(page - 1)}>
            Prev
          </Button>
          <Button>{page}</Button>
          <Button
            disabled={page === Math.ceil(length / 20)}
            onClick={() => setPage(page + 1)}
          >
            Next
          </Button>
        </div>
      </div>
      <section>
        <Footer />
      </section>
    </>
  );
}
  
};

export { Product };

 {/* <div>
              <h1 style={{ fontSize: "1.5rem" }}>Filter</h1>
              <Box>
                <Select
                  placeholder="Price â‚¹"
                  onChange={({ target }) => {
                    let array = target.value.split(":").map(Number);
                    for (let i = 0; i < array.length; i++) {
                      array[i] = array[i] / 81;
                    }
                    setPrice(array);
                  }}
                  textAlign="center"
                >
                  <option value="0:500">Below 500</option>
                  <option value="500:1000">500 - 1000</option>
                  <option value="1000:1500">1000 - 1500</option>
                  <option value="1500:2000">1500 - 2000</option>
                  <option value="2000:2500">2000 - 2500</option>
                  <option value="2500:10000000">Above 2500</option>
                </Select>
              </Box>
              <Box>
                <Select
                  placeholder="Reviews"
                  textAlign="center"
                  onChange={({ target }) => {
                    if (target.value === "increasing") {
                      setSort("numReviews");
                      setOrderBy("asc");
                    } else {
                      setSort("numReviews");
                      setOrderBy("desc");
                    }
                  }}
                >
                  <option value="increasing">Low to High</option>
                  <option value="decreasing">High to Low</option>
                </Select>
              </Box>
            </div> */}